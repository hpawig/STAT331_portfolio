---
title: "Lab 7: Blackfoot River Fish"
author: "Hannah Pawig"
format:
  html:
    theme: lux
    smooth-scroll: true
    code-fold: true
    code-summary: "Click me to see the code!"
    self-contained: true
editor: visual
execute:
  error: false
---

# Setup

```{r}
#| message: false
#| include: false
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(here)
library(ggtext)

fishies <- read.csv(here::here('supporting_artifacts',
                               'learning_targets',
                               'Lab 7',
                                'BlackfootFish.csv'))
```

# Part One: Summaries and Plots {style="color: cadetblue"}

## 1 --- Summarizing Missing Data {style="color: lightslategray"}

```{r}
# can write sum_na <- function(x) {
#   sum(is.na(x))
# }

fishies |>
  summarise(
    across(
    .cols = everything(),
    .fns = ~sum(is.na(.))))

```

1796 observations have missing weight values. Missing values are only present in the `weight` variable.

## 2 --- Visualizing Missing Data {style="color: lightslategray"}

```{r}
#| warning: false
fishies |>
  group_by(year, section, trip) |>
  mutate(
    trip = as.factor(trip)
  ) |>
  summarise(
    across(
      .cols = everything(),
      .fns = ~sum(is.na(.))
    )
  ) |>
  ggplot(mapping = aes(x = year,
                       y = weight,
                       fill = trip)) +
  geom_col() +
  scale_x_continuous(breaks = seq(from = 1988, to = 2006, by = 2)) +
  labs(title = "Number of Missing Weight Values by Section (1989-2006)",
       fill = "Trip") +
  facet_wrap(~section) +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 7))

```

# Part Two {style="color: darkgreen"}

## 3 --- Writing a Function with Stops {style="color: seagreen"}

```{r}
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec),
            length(vec) > 1)
  range <- range(vec, na.rm = TRUE)
  num <- vec - range[1]
  denom <- range[2] - range[1]
  return(num / denom)

}

```

## 4 --- Performing a Simple Test {style="color: seagreen"}

> Verifying that the minimum rescaled vector is 0 and the maximum is 1.

```{r}
x <- c(1:25, NA)
rescaled_x <- rescale_01(x)

min(rescaled_x, na.rm = TRUE)
max(rescaled_x, na.rm = TRUE)
```

## 5 --- A More Difficult Test {style="color: seagreen"}

> Plotting original data vs. the data with rescaled length.

```{r}
#| warning: false
#| layout: '[1,1]'

# resource for modifying plot title text using ggtext:
# https://www.infoworld.com/article/3527449/add-color-to-your-ggplot2-text-in-r.html

cp_colors <- c('darkgoldenrod1', 'darkgreen')

fishies |>
  ggplot(mapping = aes(color = section)) +
  geom_density(mapping = aes(x = length)) +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = 'none',
        plot.caption = element_text(face = 'italic')) +
  labs(title = "Length of Fish",
       subtitle = "by River Section: <span style='color:darkgoldenrod1'>Johnsrud</span> and 
    <span style='color:darkgreen'>ScottyBrown</span>",
       caption = "Raw Length") +
  scale_color_manual(values = cp_colors)


fishies_scaled <- fishies |>
  mutate(
    across(.cols = length,
           .fns = rescale_01)
  )

fishies_scaled |>
  ggplot(mapping = aes(color = section)) +
  geom_density(mapping = aes(x = length)) +
  theme(axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = 'none',
        plot.caption = element_text(face = 'italic')) +
  labs(title = "Length of Fish",
       subtitle = "by River Section: <span style='color:darkgoldenrod1'>Johnsrud</span> and 
    <span style='color:darkgreen'>ScottyBrown</span>",
       caption = 'Rescaled Length') +
  scale_color_manual(values = cp_colors)
  
```

## 6 --- Incorporating Variables {style="color: seagreen"}

> Writing a `rescale_column` function using `rescale_01` from Task 1.

```{r}
rescale_column <- function(data, cols) {
  stopifnot(is.data.frame(data))
  
  data <- data |>
    mutate(
      across(
        .cols = {{ cols }},
        .fns = rescale_01
      )
    )
  return(data)
}
```

## 7 --- Another Function Test {style="color: seagreen"}

> Using rescale_column to rescale both `length` and `weight` columns in the dataset. The output is the first 10 rows of the rescaled data.

```{r}
fishies |>
  rescale_column(cols = length:weight) |>
  head(n = 10)
```
