---
title: "Lab 8: Singing the Song"
author: "Hannah Pawig"
format:
  html:
    theme: lux
    smooth-scroll: true
    code-fold: true
    code-summary: 'This is where the code lives'
    self-contained: true
    number-sections: true
editor: visual
execute:
  error: false
---

# Singing the Song

```{r packages}
#| include: false
library(dplyr)
library(glue)
library(stringr)
library(purrr)
library(english)
```

```{r load-data}
#| include: false
#| message: false
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1") 
```

## Creating pluralize_gift function

```{r pluralize_function}
#| code-fold: show
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words

pluralize_gift <- function(gift){
  gift <- case_when(
    str_detect(string = {{ gift }},
               pattern = "y$") ~ str_replace(string = {{ gift }},
                                    pattern = "y",
                                    replacement = "ies"),
    str_detect(string = {{ gift }},
               pattern = "oo") ~ str_replace(string = {{ gift }},
                                               pattern = "oo",
                                               replacement = "ee"),
    str_detect(string = {{ gift }},
               pattern = "s$") ~ {{ gift }},
    TRUE ~ str_c({{ gift }},"s", sep = "")
    )

return(gift)

}
```

## Creating make_phrase function

```{r phrase-function}
#| code-fold: show
make_phrase <- function(num_word, item, verb, adjective, location) {
  
  ## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- if_else(num_word != 'one', 
            true = pluralize_gift(item),
            false = item)
  
  ## Step 3: If the word starts with a vowel, add "an" to the beginning
  num_word <- 
    case_when(
      num_word == 'one' & str_detect(string = item,
                                      pattern = "^[aeiou]") ~ 'an',
      num_word == 'one' & !str_detect(string = item,
                                      pattern = "^[aeiou]") ~ 'a',
      TRUE ~ num_word
    )

  ## Step 4: Glue all of the pieces together! 
  phrase <- str_squish(glue('{num_word} {adjective} {item} {verb} {location}'))
  return(phrase)
}
```

# Iteration

## Creating a sing_line function

```{r singline-function}
#| code-fold: show
# Produces the string for one day of the song.

sing_line <- function(dataset, line, phrase_col) {
  
  # Step 1: Setup the intro line
  num_word <- english::ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases

    phrases <- dataset |>
      pull( {{ phrase_col }} )
      
    reverse_lines <- glue::glue_collapse(phrases[line:1], sep = "\n", last = ' and\n')
    

    
  ## put it together
    output_phrase <- glue('{intro}\n{reverse_lines}')
    return(output_phrase)

}
```

## Small Test

```{r}
xmas2 <- xmas |>
  mutate(
    day.num = as.character(english::english(Day)), 
    Full.Phrase = pmap_chr(.l = list(num_word = day.num, 
                                     item = Gift.Item, 
                                     verb = Verb, 
                                     adjective = Adjective, 
                                     location = Location), 
                           .f = make_phrase))
    
xmas2 |>
  sing_line(line = 2, phrase_col = Full.Phrase)
```

## A Larger Test

```{r}
map_chr(1:12, ~ sing_line(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = "\n") |>
  cat()
```
